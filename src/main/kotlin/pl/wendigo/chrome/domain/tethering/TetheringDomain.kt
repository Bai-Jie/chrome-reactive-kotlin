package pl.wendigo.chrome.domain.tethering

/**
 * The Tethering domain defines methods and events for browser port binding.
 *
 * This class was autogenerated by main.go. Do not edit :)
 */
@pl.wendigo.chrome.ProtocolExperimental class TetheringDomain internal constructor(private val connection : pl.wendigo.chrome.RemoteChromeConnection) {

	/**
	 * Request browser port binding.
	 */
	fun bind(input : BindRequest) : io.reactivex.Flowable<pl.wendigo.chrome.GenericResponse> {
        return connection.runAndCaptureResponse("$domainName.bind", input, pl.wendigo.chrome.GenericResponse::class.java)
	}

	/**
	 * Request browser port unbinding.
	 */
	fun unbind(input : UnbindRequest) : io.reactivex.Flowable<pl.wendigo.chrome.GenericResponse> {
        return connection.runAndCaptureResponse("$domainName.unbind", input, pl.wendigo.chrome.GenericResponse::class.java)
	}

  /**
   * Informs that port was successfully bound and got a specified connection id.
   */
  fun onAccepted() : io.reactivex.Flowable<AcceptedEvent> {
      return connection.captureEvents("$domainName.accepted", AcceptedEvent::class.java)
  }

  companion object {
    private const val domainName = "Tethering"
  }
}

data class BindRequest (
    /**
     * Port number to bind.
     */
    val port : Int

)

data class UnbindRequest (
    /**
     * Port number to unbind.
     */
    val port : Int

)

data class AcceptedEvent (
  /**
   * Port number that was successfully bound.
   */
  val port : Int,

  /**
   * Connection id to be used.
   */
  val connectionId : String

)

