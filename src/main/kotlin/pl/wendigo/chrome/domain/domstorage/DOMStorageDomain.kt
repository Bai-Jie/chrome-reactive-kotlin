package pl.wendigo.chrome.domain.domstorage

/**
 * Query and modify DOM storage.
 *
 * This class was autogenerated by main.go. Do not edit :)
 */
@pl.wendigo.chrome.ProtocolExperimental class DOMStorageDomain internal constructor(private val connection : pl.wendigo.chrome.RemoteChromeConnection) {

	/**
	 * Enables storage tracking, storage events will now be delivered to the client.
	 */
	fun enable() : io.reactivex.Flowable<pl.wendigo.chrome.GenericResponse> {
        return connection.runAndCaptureResponse("$domainName.enable", null, pl.wendigo.chrome.GenericResponse::class.java)
	}

	/**
	 * Disables storage tracking, prevents storage events from being sent to the client.
	 */
	fun disable() : io.reactivex.Flowable<pl.wendigo.chrome.GenericResponse> {
        return connection.runAndCaptureResponse("$domainName.disable", null, pl.wendigo.chrome.GenericResponse::class.java)
	}

	/**
	 *
	 */
	fun getDOMStorageItems(input : GetDOMStorageItemsRequest) : io.reactivex.Flowable<GetDOMStorageItemsResponse> {
        return connection.runAndCaptureResponse("$domainName.getDOMStorageItems", input, GetDOMStorageItemsResponse::class.java)
	}

	/**
	 *
	 */
	fun setDOMStorageItem(input : SetDOMStorageItemRequest) : io.reactivex.Flowable<pl.wendigo.chrome.GenericResponse> {
        return connection.runAndCaptureResponse("$domainName.setDOMStorageItem", input, pl.wendigo.chrome.GenericResponse::class.java)
	}

	/**
	 *
	 */
	fun removeDOMStorageItem(input : RemoveDOMStorageItemRequest) : io.reactivex.Flowable<pl.wendigo.chrome.GenericResponse> {
        return connection.runAndCaptureResponse("$domainName.removeDOMStorageItem", input, pl.wendigo.chrome.GenericResponse::class.java)
	}

  /**
   *
   */
  fun onDomStorageItemsCleared() : io.reactivex.Flowable<DomStorageItemsClearedEvent> {
      return connection.captureEvents("$domainName.domStorageItemsCleared", DomStorageItemsClearedEvent::class.java)
  }

  /**
   *
   */
  fun onDomStorageItemRemoved() : io.reactivex.Flowable<DomStorageItemRemovedEvent> {
      return connection.captureEvents("$domainName.domStorageItemRemoved", DomStorageItemRemovedEvent::class.java)
  }

  /**
   *
   */
  fun onDomStorageItemAdded() : io.reactivex.Flowable<DomStorageItemAddedEvent> {
      return connection.captureEvents("$domainName.domStorageItemAdded", DomStorageItemAddedEvent::class.java)
  }

  /**
   *
   */
  fun onDomStorageItemUpdated() : io.reactivex.Flowable<DomStorageItemUpdatedEvent> {
      return connection.captureEvents("$domainName.domStorageItemUpdated", DomStorageItemUpdatedEvent::class.java)
  }

  companion object {
    private const val domainName = "DOMStorage"
  }
}

data class GetDOMStorageItemsRequest (
    /**
     *
     */
    val storageId : StorageId

)

data class GetDOMStorageItemsResponse (
  /**
   *
   */
  val entries : Array<Item>

)

data class SetDOMStorageItemRequest (
    /**
     *
     */
    val storageId : StorageId,

    /**
     *
     */
    val key : String,

    /**
     *
     */
    val value : String

)

data class RemoveDOMStorageItemRequest (
    /**
     *
     */
    val storageId : StorageId,

    /**
     *
     */
    val key : String

)

data class DomStorageItemsClearedEvent (
  /**
   *
   */
  val storageId : StorageId

)

data class DomStorageItemRemovedEvent (
  /**
   *
   */
  val storageId : StorageId,

  /**
   *
   */
  val key : String

)

data class DomStorageItemAddedEvent (
  /**
   *
   */
  val storageId : StorageId,

  /**
   *
   */
  val key : String,

  /**
   *
   */
  val newValue : String

)

data class DomStorageItemUpdatedEvent (
  /**
   *
   */
  val storageId : StorageId,

  /**
   *
   */
  val key : String,

  /**
   *
   */
  val oldValue : String,

  /**
   *
   */
  val newValue : String

)

