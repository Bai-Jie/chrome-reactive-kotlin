package pl.wendigo.chrome.domain.cachestorage

/**
 * CacheStorageDomain represents remote debugger protocol domain.
 *
 * This class was autogenerated by main.go. Do not edit :)
 */
@pl.wendigo.chrome.ProtocolExperimental class CacheStorageDomain internal constructor(private val connection : pl.wendigo.chrome.RemoteChromeConnection) {

	/**
	 * Requests cache names.
	 */
	fun requestCacheNames(input : RequestCacheNamesRequest) : io.reactivex.Flowable<RequestCacheNamesResponse> {
        return connection.runAndCaptureResponse("CacheStorage.requestCacheNames", input, RequestCacheNamesResponse::class.java)
	}

	/**
	 * Requests data from cache.
	 */
	fun requestEntries(input : RequestEntriesRequest) : io.reactivex.Flowable<RequestEntriesResponse> {
        return connection.runAndCaptureResponse("CacheStorage.requestEntries", input, RequestEntriesResponse::class.java)
	}

	/**
	 * Deletes a cache.
	 */
	fun deleteCache(input : DeleteCacheRequest) : io.reactivex.Flowable<pl.wendigo.chrome.GenericResponse> {
        return connection.runAndCaptureResponse("CacheStorage.deleteCache", input, pl.wendigo.chrome.GenericResponse::class.java)
	}

	/**
	 * Deletes a cache entry.
	 */
	fun deleteEntry(input : DeleteEntryRequest) : io.reactivex.Flowable<pl.wendigo.chrome.GenericResponse> {
        return connection.runAndCaptureResponse("CacheStorage.deleteEntry", input, pl.wendigo.chrome.GenericResponse::class.java)
	}

  }

data class RequestCacheNamesRequest (
    /**
     * Security origin.
     */
    val securityOrigin : String

)

/**
 * Requests cache names.
 */
data class RequestCacheNamesResponse(
  /**
   * Caches for the security origin.
   */
  val caches : Array<Cache>

)

data class RequestEntriesRequest (
    /**
     * ID of cache to get entries from.
     */
    val cacheId : CacheId,

    /**
     * Number of records to skip.
     */
    val skipCount : Int,

    /**
     * Number of records to fetch.
     */
    val pageSize : Int

)

/**
 * Requests data from cache.
 */
data class RequestEntriesResponse(
  /**
   * Array of object store data entries.
   */
  val cacheDataEntries : Array<DataEntry>,

  /**
   * If true, there are more entries to fetch in the given range.
   */
  val hasMore : Boolean

)

data class DeleteCacheRequest (
    /**
     * Id of cache for deletion.
     */
    val cacheId : CacheId

)


data class DeleteEntryRequest (
    /**
     * Id of cache where the entry will be deleted.
     */
    val cacheId : CacheId,

    /**
     * URL spec of the request.
     */
    val request : String

)



