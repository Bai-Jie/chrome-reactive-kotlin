package {{Package}}.domain.{{Domain.LowerName}}

/**
 * {{#if Domain.Description}}{{{Domain.Description}}}{{else}}{{Domain.Name}}Domain represents remote debugger protocol domain.{{/if}}
 *
 * This class was autogenerated by main.go. Do not edit :)
 */
{{#if Domain.Experimental}}@{{Package}}.ProtocolExperimental {{/if}}{{#if Domain.Deprecated}}@{{Package}}.ProtocolDeprecated {{/if}}class {{Domain.Name}}Domain internal constructor(private val connection : {{Package}}.RemoteChromeConnection) {

  {{#each Domain.Commands}}
	/**
	 * {{{Description}}}
	 */
	{{#if Experimental}}@{{Package}}.ProtocolExperimental
  {{/if}}{{#if Deprecated}}@{{Package}}.ProtocolDeprecated
  {{/if}}  fun {{Name}}({{#if HasInputParams}}input : {{SimpleName}}Request{{/if}}) : io.reactivex.Flowable<{{#if HasReturnValue}}{{ClassName}}{{else}}{{Package}}.GenericResponse{{/if}}> {
        return connection.runAndCaptureResponse("{{Domain}}.{{Name}}", {{#if HasInputParams}}input{{else}}null{{/if}}, {{#if HasReturnValue}}{{ClassName}}{{else}}{{Package}}.GenericResponse{{/if}}::class.java)
	}

	{{/each}}
  {{#each Domain.Events}}
  /**
   * {{{Description}}}
   */
   fun on{{SimpleName}}() : io.reactivex.Flowable<{{#if HasReturnValue}}{{ClassName}}{{else}}{{Package}}.ChromeProtocolEvent{{/if}}> {
      return connection.captureEvents({{#if HasReturnValue}}{{ClassName}}{{else}}{{Package}}.ChromeProtocolEvent{{/if}}::class.java)
   }
  {{/each}}
}

{{#each Domain.Commands}}
{{{InputDataClass}}}
{{{OutputDataClass}}}
{{/each}}

{{#each Domain.Events}}
{{{OutputDataClass}}}
{{/each}}
