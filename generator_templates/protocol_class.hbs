package {{Package}}

import java.io.Closeable

/**
 * ChromeProtocol represents session established with given inspectablePage via chrome's remote debugging protocol.
 */
open class ChromeProtocol internal constructor(private val api: DebuggerProtocol) : Closeable {

    /**
     * Register event eventNameToClassMapping
     */
    init {
        api.registerEventMappings(mapOf(
        {{#each Protocol.EventMappings}}
            "{{EventName}}" to {{Class}}::class.java{{#unless @last}},{{/unless}}
        {{/each}}
        ))
    }

    {{#each Protocol.Domains}}
    /**
     * {{#if Description}}{{{Description}}}{{else}}Returns {{Name}} domain object.{{/if}}
     */
    val {{Name}} : {{Package}}.domain.{{LowerName}}.{{Name}}Domain by lazy {
        {{Package}}.domain.{{LowerName}}.{{Name}}Domain(api)
    }

    {{/each}}
    /**
     * Returns flowable capturing all events.
     */
    fun Events() : io.reactivex.Flowable<ProtocolEvent> {
        return api.captureAllEvents().map {
            it.value()
        }
    }

    /**
     * Closes debugging session.
     */
    override fun close() {
        return api.close()
    }

    companion object {

        /**
         * Opens new debugging session via chrome debugging protocol for given InspectablePage.
         */
        @JvmStatic @JvmOverloads
        fun openSession(page: InspectablePage, eventBufferSize: Int = 128) : ChromeProtocol {
            return ChromeProtocol(ChromeDebuggerConnection.openSession(page.webSocketDebuggerUrl!!, eventBufferSize))
        }

        /**
         * Opens new headless debugging session via chrome debugging protocol for given InspectablePage.
         *
         * When opening headless session new browser context is created and communication goes through Target domain
         * with target id/session id.
         */
        @JvmStatic @JvmOverloads
        fun openHeadlessSession(page: InspectablePage, eventBufferSize: Int = 128, width : Int = 1024, height : Int = 768) : HeadlessChromeProtocol {
            return HeadlessChromeProtocol.create(openSession(page, eventBufferSize), page.url, width, height)
        }
    }
}