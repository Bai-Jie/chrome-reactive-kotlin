package {{Package}}

/**
 * ChromeProtocol represents session established with given inspectablePage via chrome's remote debugging protocol.
 */
class ChromeProtocol internal constructor(private val api: DebuggerProtocol) {

    /**
     * Register event eventNameToClassMapping
     */
    init {
      api.registerEventMappings(mapOf(
      {{#each Protocol.EventMappings}}
      "{{EventName}}" to {{Class}}::class.java{{#unless @last}},{{/unless}}
      {{/each}}
      ))
    }

    {{#each Protocol.Domains}}
    /**
     * {{#if Description}}{{{Description}}}{{else}}Returns {{Name}} domain object.{{/if}}
     */
    val {{Name}} : {{Package}}.domain.{{LowerName}}.{{Name}}Domain by lazy {
        {{Package}}.domain.{{LowerName}}.{{Name}}Domain(api)
    }

    {{/each}}
    /**
     * Returns flowable capturing all events.
     */
    fun Events() : io.reactivex.Flowable<ProtocolEvent> {
      return api.captureAllEvents()
    }

    /**
     * Closes debugging session.
     */
    fun closeSession() {
      return api.close()
    }

    companion object {

        /**
         * Opens new debugging session via chrome debugging protocol for given InspectablePage.
         */
        fun openSession(page: InspectablePage, eventBufferSize: Int = 128) : ChromeProtocol {
            return ChromeProtocol(ChromeDebuggerConnection.openSession(page.webSocketDebuggerUrl, eventBufferSize))
        }

        /**
        * Opens new debugging session via chrome debugging protocol for given InspectablePage.
        */
        fun openHeadlessSession(eventBufferSize: Int = 128) : ChromeProtocol {
            return ChromeProtocol(HeadlessChromeDebuggerConnection.openSession(eventBufferSize))
        }
    }
}