package {{Package}}

/**
 * RemoteChrome represents session established via chrome's remote debugging protocol.
 */
class RemoteChrome internal constructor(private val api: RemoteChromeConnection) {

    /**
     * Register event mappings
     */
    init {
      api.registerMappings(mapOf(
      {{#each Protocol.EventMappings as |Class EventName|}}
      "{{EventName}}" to {{Class}}::class.java{{#unless @last}},{{/unless}}
      {{/each}}
      ))
    }

    {{#each Protocol.Domains}}
    /**
     * {{#if Description}}{{{Description}}}{{else}}Returns {{Name}} domain object.{{/if}}
     */
    val {{Name}} : {{Package}}.domain.{{LowerName}}.{{Name}}Domain by lazy {
        {{Package}}.domain.{{LowerName}}.{{Name}}Domain(api)
    }

    {{/each}}

    /**
     * Returns flowable capturing all events
     */
    fun onProtocolEvents() : io.reactivex.Flowable<ChromeProtocolEvent> {
      return api.captureAllEvents()
    }

    {{#each Protocol.Domains}}
    /**
     * Returns flowable capturing {{Name}} domains events.
     */
     fun on{{Name}}Events() : io.reactivex.Flowable<ChromeProtocolEvent> {
       return api.captureAllEvents().filter {
         it.protocolDomain == "{{Name}}"
       }
     }
    {{/each}}

    /**
     * Closes connection to API.
     */
    fun close() {
      return api.close()
    }

    companion object {
        /**
         * Connects to chrome debugging protocol on host and port.
         */
        @kotlin.jvm.Throws(RemoteChromeException::class)
        fun connect(host: String, port: Int, debug: Boolean) : RemoteChrome {
          return RemoteChrome(
              RemoteChromeConnection(host, port, debug).connect()
          )
        }
    }
}
