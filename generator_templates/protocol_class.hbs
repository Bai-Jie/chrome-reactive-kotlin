package {{Package}}

/**
 * RemoteChrome represents session established via chrome's remote debugging protocol.
 */
class RemoteChrome internal constructor(private val api: DebuggerConnection) {

    /**
     * Register event mappings
     */
    init {
      api.registerMappings(mapOf(
      {{#each Protocol.EventMappings as |Class EventName|}}
      "{{EventName}}" to {{Class}}::class.java{{#unless @last}},{{/unless}}
      {{/each}}
      ))
    }

    {{#each Protocol.Domains}}
    /**
     * {{#if Description}}{{{Description}}}{{else}}Returns {{Name}} domain object.{{/if}}
     */
    val {{Name}} : {{Package}}.domain.{{LowerName}}.{{Name}}Domain by lazy {
        {{Package}}.domain.{{LowerName}}.{{Name}}Domain(api)
    }

    {{/each}}

    /**
     * Returns flowable capturing all events.
     */
    fun onProtocolEvents() : io.reactivex.Flowable<DebuggerEvent> {
      return api.captureAllEvents()
    }

    {{#each Protocol.Domains}}
    /**
     * Returns flowable capturing {{Name}} domains events.
     */
     fun on{{Name}}Events() : io.reactivex.Flowable<DebuggerEvent> {
       return api.captureAllEvents().filter {
         it.protocolDomain() == "{{Name}}"
       }
     }
    {{/each}}

    /**
     * Closes debuggerConnection to API.
     */
    fun close() {
      return api.close()
    }

    companion object {
        /**
         * Connects to chrome debugging protocol on host and port.
         */
        @kotlin.jvm.Throws(RemoteChromeException::class)
        fun newTab(chromeAddress: String) : RemoteChrome {
          return RemoteChrome(
                DebuggerConnection(
                    Inspector(chromeAddress)
                        .openTab()
                        .map(InspectorTab::webSocketDebuggerUrl)
                        .blockingGet()
                ).connect()
          )
        }

        /**
         * Connects to chrome debugging protocol on host and port for given tab url.
         */
        @kotlin.jvm.Throws(RemoteChromeException::class)
        fun connectToTab(chromeAddress: String, tabUrl: String) : RemoteChrome {
            return RemoteChrome(
                DebuggerConnection(
                    Inspector(chromeAddress)
                        .findTab(tabUrl)
                        .singleOrError()
                        .map(InspectorTab::webSocketDebuggerUrl)
                        .blockingGet()
                ).connect()
            )
        }
    }
}
