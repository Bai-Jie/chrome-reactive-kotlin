package {{Package}}

import io.reactivex.Single
import pl.wendigo.chrome.domain.target.CreateTargetRequest
import pl.wendigo.chrome.domain.target.AttachToTargetRequest
import java.io.Closeable

/**
 * ChromeProtocol represents session established with given inspectablePage via chrome's remote debugging protocol.
 */
open class ChromeProtocol internal constructor(private val api: DebuggerProtocol) : Closeable {

    /**
     * Register event eventNameToClassMapping
     */
    init {
      api.registerEventMappings(mapOf(
      {{#each Protocol.EventMappings}}
      "{{EventName}}" to {{Class}}::class.java{{#unless @last}},{{/unless}}
      {{/each}}
      ))
    }

    {{#each Protocol.Domains}}
    /**
     * {{#if Description}}{{{Description}}}{{else}}Returns {{Name}} domain object.{{/if}}
     */
    val {{Name}} : {{Package}}.domain.{{LowerName}}.{{Name}}Domain by lazy {
        {{Package}}.domain.{{LowerName}}.{{Name}}Domain(api)
    }

    {{/each}}
    /**
     * Returns flowable capturing all events.
     */
    fun Events() : io.reactivex.Flowable<ProtocolEvent> {
      return api.captureAllEvents().map {
        it.value()
      }
    }

    /**
     * Closes debugging session.
     */
    override fun close() {
      return api.close()
    }

    /**
     * Opens new headless session if it's supported.
     */
    fun headless(url : String, width : Int = 1024, height: Int = 768) : Single<HeadlessChromeProtocol> {
        val mapper = FrameMapper()

        return Target.createBrowserContext().flatMap { (browserContextId) ->
            Target.createTarget(CreateTargetRequest(
                url = url,
                browserContextId = browserContextId,
                height = height,
                width = width
            )).flatMap { (targetId) -> Target.attachToTarget(AttachToTargetRequest(targetId = targetId)).map {
                    HeadlessChromeProtocol(api = ChromeDebuggerConnection(TargetedFramesStream(
                            mapper,
                            Target,
                            targetId,
                            browserContextId
                        ), mapper),
                        url = url,
                        height = height,
                        width = width,
                        targetId = targetId,
                        browserContextId = browserContextId
                    )
                }
            }
        }
    }

    companion object {

        /**
         * Opens new debugging session via chrome debugging protocol for given InspectablePage.
         */
        fun openSession(page: InspectablePage, eventBufferSize: Int = 128) : ChromeProtocol {
            return ChromeProtocol(ChromeDebuggerConnection.openSession(page.webSocketDebuggerUrl!!, eventBufferSize))
        }
    }
}